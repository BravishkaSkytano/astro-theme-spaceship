---
// import { getKnowledgeTree, getKnowledgeTreeByNodeId } from "@/sdk";

export type Props = {
  minHeight?: number;
  class?: string;
  nodeId?: string;
  size?: "small" | "md" | "lg";
};

const sizes = {
  small: {
    height: 150,
    width: 200,
    zoom: 1.5,
  },
  md: {
    height: 300,
    width: 400,
    zoom: 2,
  },
  lg: {
    height: 1000,
    width: 928,
    zoom: 2,
  },
};

const { class: className, nodeId, size } = Astro.props;

const sizeVars = sizes[size || "md"];

const tree = {
  nodes: [],
  links: [],
}

// const shouldValidate = import.meta.env.DEV;

// const tree = nodeId
//   ? await getKnowledgeTreeByNodeId(lang, nodeId, shouldValidate)
//   : await getKnowledgeTree(lang, shouldValidate);

// if (shouldValidate && tree.validation && !tree.validation?.isValid) {
//   console.warn("Tree is not valid. reason:", tree.validation?.reason);
//   console.log(tree);
//   // return Astro.redirect(`/500`);
// }
---

<div id="chart" class={className}></div>
<script src="https://cdn.jsdelivr.net/npm/d3@7"></script>
<script is:inline define:vars={{ nodeId, tree, sizeVars }}>
  const width = sizeVars.width;
  const height = sizeVars.height;
  const colors = [
    "#34d399",
    "#56766B",
    "#edc949",
    "#e15759",
    "#76b7b2",
    "#59a14f",
    "#edc949",
    "#af7aa1",
    "#ff9da7",
    "#9c755f",
    "#bab0ac",
  ];

  const chart = () => {
    // Specify the color scale.
    const color = d3.scaleOrdinal(colors);

    // The force simulation mutates links and nodes, so create a copy
    // so that re-evaluating this cell produces the same result.
    const links = tree.links.map((d) => ({ ...d }));
    const nodes = tree.nodes.map((d) => ({ ...d }));

    // Create a simulation with several forces.
    const simulation = d3
      .forceSimulation(nodes)
      .force(
        "link",
        d3.forceLink(links).id((d) => d.id),
      )
      .force("charge", d3.forceManyBody())
      .force("x", d3.forceX())
      .force("y", d3.forceY());

    // Create the SVG container.
    const svg = d3
      .create("svg")
      .attr("width", width)
      .attr("height", height)
      .attr("viewBox", [-width / 2, -height / 2, width, height])
      .attr("style", "max-width: 100%; height: auto;");

    // set zoom
    const zoom = d3.zoom().on("zoom", (event) => {
      svg.attr("transform", event.transform);
      svg.attr("max-width", width);
      svg.attr("max-height", height);
    });

    svg.call(zoom);
    zoom.scaleTo(svg, sizeVars.zoom);

    // Add a line for each link, and a circle for each node.
    const link = svg
      .append("g")
      .attr("stroke", "#1A694C")
      .attr("stroke-opacity", 0.6)
      .selectAll("line")
      .data(links)
      .join("line")
      .attr("stroke-width", (d) => Math.sqrt(d.value));

    const node = svg
      .append("g")
      .attr("cursor", "pointer")
      .selectAll("circle")
      .data(nodes)
      .join("circle")
      .attr("r", 5)
      .attr("fill", (d) => (d.id === nodeId ? colors[1] : colors[0]));

    node.append("title").text((d) => d.id);

    const label = svg
      .append("g")
      .attr("font-family", "sans-serif")
      .attr("font-size", 12)
      .selectAll("text")
      .data(nodes)
      .join("text")
      .attr("dy", "1.5em")
      .attr("x", (d) => (d.children ? -6 : 6))
      .attr("text-anchor", (d) => (d.children ? "end" : "start"))
      .attr("display", "none")
      .attr("fill", "transparent")
      .attr("stroke", "transparent")
      .text((d) => d.label ?? d.id)
      .clone(true)
      .lower();

    // change node color on hover
    node.on("mouseover", function (_, d) {
      d3.select(label.nodes()[d.index])
        .attr("display", "inline-flex")
        .attr("fill", () => colors[2]);
      d3.select(this).attr("fill", () => colors[2]);
    });
    node.on("mouseout", function (_, d) {
      d3.select(label.nodes()[d.index])
        .attr("display", "none")
        .attr("fill", "transparent");
      d3.select(this).attr("fill", (d) =>
        color(d.id === nodeId ? "active" : d.group),
      );
    });

    node.on("click", function (_, d) {
      const [lang, ...slug] = d.id.split("/");
      const filePath = slug.join("/");
      const fileSlug = filePath.replace(/\.md$/, "");
      const url = new URL(window.location.href);
      const langPrefix = lang === "en" ? "" : `/${lang}`;
      url.pathname = `${langPrefix}/knowledge/${fileSlug}/`;
      window.location.href = url.toString();
    });

    // label.on("mouseover", function (event, d) {
    //   d3.select(this).attr("fill", (d) => color("leaf"));
    // });

    // label.on("mouseout", function (event, d) {
    //   d3.select(this).attr("fill", (d) => color(d.group));
    // });

    // Add a drag behavior.
    node.call(
      d3
        .drag()
        .on("start", dragstarted)
        .on("drag", dragged)
        .on("end", dragended),
    );

    // Set the position attributes of links and nodes each time the simulation ticks.
    simulation.on("tick", () => {
      link
        .attr("x1", (d) => d.source.x)
        .attr("y1", (d) => d.source.y)
        .attr("x2", (d) => d.target.x)
        .attr("y2", (d) => d.target.y);

      node.attr("cx", (d) => d.x).attr("cy", (d) => d.y);
      label.attr("x", (d) => d.x).attr("y", (d) => d.y);
    });

    // Reheat the simulation when drag starts, and fix the subject position.
    function dragstarted(event) {
      if (!event.active) simulation.alphaTarget(0.3).restart();
      event.subject.fx = event.subject.x;
      event.subject.fy = event.subject.y;
    }

    // Update the subject (dragged node) position during drag.
    function dragged(event) {
      event.subject.fx = event.x;
      event.subject.fy = event.y;
    }

    // Restore the target alpha so the simulation cools after dragging ends.
    // Unfix the subject position now that it’s no longer being dragged.
    function dragended(event) {
      if (!event.active) simulation.alphaTarget(0);
      event.subject.fx = null;
      event.subject.fy = null;
    }

    // When this cell is re-run, stop the previous simulation. (This doesn’t
    // really matter since the target alpha is zero and the simulation will
    // stop naturally, but it’s a good practice.)
    // invalidation.then(() => simulation.stop());

    return svg.node();
  };
  document.addEventListener("DOMContentLoaded", function () {
    const container = document.getElementById("chart");

    if (!container) {
      throw new Error("No container");
    }

    container.append(chart());
  });
</script>